version: 2.1
general:

jobs:

  test:

    working_directory: ~/repo

    docker:
    - image: circleci/openjdk:8-jdk 

    environment:
      # Customize the JVM maximum heap size
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      # download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # use latest cache if no exact match found 
            - v1-dependencies-

      # run tests
      - run:
          name: run unit tests, calculate test coverage & generate reports
          command: mvn clean surefire-report:report scoverage:check scoverage:report-only
          
      - run:
          name: generate css for the surefire reports
          command: mvn site -DgenerateReports=false

     # save build cache
      - save_cache:
          key: v1-dependencies-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
            
     # HTML test reports
      - store_artifacts:
          path: ~/repo/target/site/
          destination: Reports

     # Scoverage xml reports
      - store_test_results:
          path: ~/repo/target

      # check code quality
      - run:
          name: Install Sonarqube scanner
          command: |
             wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip
             unzip sonar-scanner-cli-3.2.0.1227-linux.zip

   #      - run:
#          name: Run Sonarqube scanner
#          command: |
#                 export SONAR_SCANNER_OPTS="-Xmx512m"
#                 eval ./sonar-scanner-3.2.0.1227-linux/bin/sonar-scanner \
#                 -Dsonar.projectKey=scala-maven-example \
#                -Dsonar.sources=. \
#                 -Dsonar.host.url=${SONAR_SERVER} \
#                 -Dsonar.login=${SONARQUBE_TOKEN} $SONAR_SCANNER_OPTS_CUSTOM

      - run:
          name: create package
          command: mvn clean install -Dmaven.test.skip=true

      - run:
          name: save package to an archive
          command: |
            mkdir -p archive
            pwd
            ls -lart ~/repo/target
            cp -r ~/repo/target/*.jar ~/repo/archive/
            
      # save build cache
      - save_cache:
          key: v1-dependencies-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
            
      # add package to workspace
      - run:
          name: save package to an archive
          command: |
            mkdir -p archive/target
            pwd
            ls -lart ~/repo/target
            cp -r ~/repo/target/*.jar ~/repo/archive/target/

      - persist_to_workspace:
          root: .
          paths:
            - archive


  build:

    working_directory: ~/repo

    docker:
    - image: circleci/openjdk:8-jdk
    
    environment:
      # Customize the JVM maximum heap size
      JVM_OPTS: -Xmx3200m 

    steps:
      - checkout

      - attach_workspace:
          at: workspace

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # use latest cache if no exact match found
            - v1-dependencies-
            
      # publish artifacts 
      - store_artifacts:
          path: ~/repo/workspace/archive/target/
          destination: JARS

      - run:
          name: install aws cli
          command: |
            sudo apt-get update && sudo apt-get install -qq -y python-pip libpython-dev
            curl -O https://bootstrap.pypa.io/get-pip.py && sudo python get-pip.py
            sudo pip install -q awscli --upgrade

      # setup remote env for docker
      - setup_remote_docker
              # docker_layer_caching: true
              
      - run:
          name: show sha1
          command: echo ${GIT_HASH}
              
      # docker image versioning
      - run:
          name: Docker image version
          command: | 
              GIT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7) 
              
              if git tag -l --points-at HEAD | grep "^v.*";
              then
                version=$(git tag -l --points-at HEAD)
              else
                version="${CIRCLE_BRANCH}-${GIT_HASH}"
              fi
              
              echo "export APP_VERSION=`echo ${version}`" >> $BASH_ENV
              source $BASH_ENV                           

      # build docker image
      - run:
          name: Docker build
          command: |
            cp ~/repo/Dockerfile ~/repo/workspace/archive/
            cd ~/repo/workspace/archive/
            docker build -t scala-maven:$APP_VERSION .
            docker images   

     # # pushing to ECR
     # - run:
     #     name: Push to ECR
     #     command: |
     #       cd ~/repo/workspace/archive/
     #       eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
     #       docker tag scala-maven:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/scala-maven:${CIRCLE_BRANCH}
     #       docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:${CIRCLE_BRANCH}

# show all docker images
#      - run:
#          name:
#          command: |
#            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
#            aws ecr list-images --repository-name scala-maven
    

  deploy:
  
    working_directory: ~/repo

    docker:
    - image: circleci/openjdk:8-jdk

    environment:
      # Customize the JVM maximum heap size
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      - attach_workspace:
          at: workspace

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # use latest cache if no exact match found
            - v1-dependencies-  
            
      - run:
          name: Install and confgure kubectl
          command: |
             sudo curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl
             sudo chmod +x /usr/local/bin/kubectl  
             
      - run:
          name: Install and confgure kubectl aws-iam-authenticator
          command: |
             curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/darwin/amd64/aws-iam-authenticator
             sudo chmod +x ./aws-iam-authenticator
             sudo cp ./aws-iam-authenticator /bin/aws-iam-authenticator
             
      - run:
          name: Install latest awscli version
          command: |
             sudo apt install unzip && curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
             unzip awscli-bundle.zip && ./awscli-bundle/install -b ~/bin/aws
             
   #   - run:
   #       name: Get the kubeconfig file 
   #       command: |
   #          export KUBECONFIG=$HOME/.kube/kubeconfig && /home/circleci/bin/aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
     
      - run:
          name: Install and configuire helm
          command: |
             sudo curl -L https://storage.googleapis.com/kubernetes-helm/helm-v3.0.0-linux-amd64.tar.gz | tar xz && sudo mv linux-amd64/helm /bin/helm 
             sudo rm -rf linux-amd64
             
      - run:
          name: Add stable repos
          command: helm repo add stable https://kubernetes-charts.storage.googleapis.com/
             
      - run:
          name: Docker image version
          command: | 
              GIT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7) 
              
              if git tag -l --points-at HEAD | grep "^v.*";
              then
                version=$(git tag -l --points-at HEAD)
              else
                version="${CIRCLE_BRANCH}-${GIT_HASH}"
              fi
              
              echo "export APP_VERSION=`echo ${version}`" >> $BASH_ENV
              source $BASH_ENV   
              
      - run:
          name: Show APP Version
          command:
              echo $APP_VERSION
            
     # - run:
     #     name: Helm deployment
     #     command: |
     #        helm upgrade --install trip-service --set=image.tag=$APP_VERSION charts/trip-service
  

workflows:
  version: 2.1
  test-build-n-deploy:
    jobs:
    - test
    - build:
        requires:
          - test
        filters:
          branches:
            only:                         
            - develop
    - deploy:
        requires:
          - build
        filters:
          branches:
            only:
            - develop
            
  approval-deploy-with-tag:
    jobs:
    - test:
        filters:
          tags:
            only: /^v.*/
          branches:
              ignore: /.*/            
    - build:
        requires:
          - test
        filters:
          tags:
            only: /^v.*/
          branches:
              ignore: /.*/ 
    - hold: 
        type: approval 
        requires: 
          - build
        filters:
          tags:
            only: /^v.*/
          branches:
              ignore: /.*/
    - deploy:
        requires:
          - hold
        filters:
          tags:
            only: /^v.*/ 
          branches:
              ignore: /.*/ 
