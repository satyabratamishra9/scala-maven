version: 2.1
general:

orbs:
  nexus-platform-orb: sonatype/nexus-platform-orb@1.0.6 

jobs:

  test:

    working_directory: ~/repo

    docker:
    - image: circleci/openjdk:8-jdk 

    environment:
      # Customize the JVM maximum heap size
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      # download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # use latest cache if no exact match found 
            - v1-dependencies-

      # run tests
      - run:
          name: run unit tests, calculate test coverage & generate reports
          command: mvn clean surefire-report:report scoverage:check scoverage:report-only
          
      - run:
          name: generate css for the surefire reports
          command: mvn site -DgenerateReports=false

     # save build cache
      - save_cache:
          key: v1-dependencies-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
            
     # HTML test reports
      - store_artifacts:
          path: ~/repo/target/site/
          destination: Reports

     # Scoverage xml reports
      - store_test_results:
          path: ~/repo/target

      # check code quality
      - run:
          name: Install Sonarqube scanner
          command: |
             wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip
             unzip sonar-scanner-cli-3.2.0.1227-linux.zip

   #      - run:
#          name: Run Sonarqube scanner
#          command: |
#                 export SONAR_SCANNER_OPTS="-Xmx512m"
#                 eval ./sonar-scanner-3.2.0.1227-linux/bin/sonar-scanner \
#                 -Dsonar.projectKey=scala-maven-example \
#                -Dsonar.sources=. \
#                 -Dsonar.host.url=${SONAR_SERVER} \
#                 -Dsonar.login=${SONARQUBE_TOKEN} $SONAR_SCANNER_OPTS_CUSTOM

      - run:
          name: create package
          command: mvn clean install -Dmaven.test.skip=true

      - run:
          name: save package to an archive
          command: |
            mkdir -p archive
            pwd
            ls -lart ~/repo/target
            cp -r ~/repo/target/*.jar ~/repo/archive/
            
      # save build cache
      - save_cache:
          key: v1-dependencies-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
            
      # add package to workspace
      - run:
          name: save package to an archive
          command: |
            mkdir -p archive/target
            pwd
            ls -lart ~/repo/target
            cp -r ~/repo/target/*.jar ~/repo/archive/target/

      - persist_to_workspace:
          root: .
          paths:
            - archive

  # -----------------------------------------------
      
   #   - run: 
   #       name: Installs the nexus-platform-api and CLI script
   #       command: |
            
   #         curl -L https://dl.bintray.com/groovy/maven/apache-groovy-binary-2.5.3.zip -o apache-groovy-binary.zip
   #         mkdir -p ${CIRCLE_WORKING_DIRECTORY}/sonatype/bin || true
   #         curl -L https://raw.githubusercontent.com/sonatype-nexus-community/docker-nexus-platform-cli/master/src/main/groovy/NexusPublisher.groovy -o ${CIRCLE_WORKING_DIRECTORY}/sonatype/bin/NexusPublisher.groovy
   #         unzip apache-groovy-binary.zip
   #         mv groovy-2.5.3 groovy
   #         echo PATH=${PATH}:${CIRCLE_WORKING_DIRECTORY}/groovy/bin/ > setup.sh
        
      #- run: >
      #    [[ -r setup.sh ]] && . setup.sh ;
       #   groovy ${CIRCLE_WORKING_DIRECTORY}/sonatype/bin/NexusPublisher.groovy 
      #    --username "admin" 
      #    --password "admin" 
      #    --serverurl "http://34.236.146.0:8081/repository/scala-maven-nexus/" 
      #    --filename "~repo/workspace/archive/scala-maven-example-1.0.0-SNAPSHOT.jar" 
      #    --format "maven2" 
      #    --repository "scala-maven-nexus" "-CgroupId=com.jesperdj -CartifactId=scala-maven-example -Cversion=1.0.0 -Aextension=jar"
      
    #  ----------
    #  - run:
    #      name: publish artifact
    #      command: |  
    #        curl -v \
    #        -F "r=scala-maven-nexus" \
    #        -F "g=com.jesperdj" \
    #        -F "a=scala-maven-example" \
    #        -F "v=1.0.0" \
    #        -F "p=jar" \
    #        -F "file=~repo/workspace/archive/scala-maven-example-1.0.0-SNAPSHOT.jar " \
    #        -u admin:admin \
    #        http://34.236.146.0:8081/repository/scala-maven-nexus/
    
    #  - run:
    #      name: install nexus cli
    #      command: |
    #         sudo apt update
    #         sudo apt install ruby-full
    #         sudo gem install nexus_cli
          
    #  - run:
    #      name: upload artifacts
    #      command: |
    #         touch .nexus_cli
    #         echo 'url: "http://my-nexus-server/nexus/"' > .nexus_cli
    #         echo 'repository: "my-repository-id"' >> .nexus_cli
    #         echo 'username: "admin"' >> .nexus_cli
    #         echo 'password: "admin"' >> .nexus_cli
             
    #         nexus-cli push_artifact com.jesperdj.scala-maven-example:scala-maven-example:jar:1.0.0 ~repo/workspace/archive/scala-maven-example-1.0.0-SNAPSHOT.jar

           
      
  #          username: '${NEXUS_RM_USERNAME}'
  #          password: '${NEXUS_RM_PASSWORD}'
  #          serverurl: 'http://107.21.74.226:8081/repository/scala-maven-nexus/'
  #          filename: '/archive/scala-maven-example-1.0.0-SNAPSHOT.jar'
  #          format: 'maven2'
  #          attributes: '-CgroupId=com.jesperdj -CartifactId=scala-maven-example -Cversion=1.0.0 -Aextension=jar'
  #          repository: 'scala-maven-nexus'
  #          workspace: '~/repo/workspace/'
  #    - run:
  #        name: publish artifact
  #        command: |
  #           mvn -Dmaven.install.skip=true -Dmaven.test.skip=true deploy:deploy-file \
  #           -DgroupId=com.jesperdj \
  #           -DartifactId=scala-maven-example \
  #           -Dversion=1.0.0 \
  #           -Dpackaging=jar \
  #           -Dfile=/workspace/archive/scala-maven-example-1.0.0-SNAPSHOT.jar \
  #           -DgeneratePom=true \
  #           -DupdateReleaseInfo=true \
  #           -Durl="https://admin:admin@http://34.236.146.0:8081/repository/scala-maven-nexus/"

  build:

    working_directory: ~/repo

    docker:
    - image: circleci/openjdk:8-jdk
    
    environment:
      # Customize the JVM maximum heap size
      JVM_OPTS: -Xmx3200m 
      GIT_HASH: $(echo $CIRCLE_SHA1 | cut -c -7)

    steps:
      - checkout

      - attach_workspace:
          at: workspace

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # use latest cache if no exact match found
            - v1-dependencies-
            
      # publish artifacts 
      - store_artifacts:
          path: ~/repo/workspace/archive/target/
          destination: JARS

      - run:
          name: install aws cli
          command: |
            sudo apt-get update && sudo apt-get install -qq -y python-pip libpython-dev
            curl -O https://bootstrap.pypa.io/get-pip.py && sudo python get-pip.py
            sudo pip install -q awscli --upgrade

      # setup remote env for docker
      - setup_remote_docker
              # docker_layer_caching: true
              
      - run:
          name: show sha1
          command: echo ${GIT_HASH}
              
      # docker image versioning
      - run:
          name: Docker image version
          command: |         
              if git tag -l --points-at HEAD | grep "^v.*";
              then
                version=$(git tag -l --points-at HEAD)
              else
                version="${CIRCLE_BRANCH}-${GIT_HASH}"
              fi
              
              echo 'export APP_VERSION=$version' >> $BASH_ENV
              source $BASH_ENV
              echo $APP_VERSION > workspace/version
              
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: workspace                

      # build docker image
      - run:
          name: Docker build
          command: |
            version=`cat workspace/version`
            cp ~/repo/Dockerfile ~/repo/workspace/archive/
            cd ~/repo/workspace/archive/
            docker build -t scala-maven:$version .
            docker images   

     # # pushing to ECR
     # - run:
     #     name: Push to ECR
     #     command: |
     #       cd ~/repo/workspace/archive/
     #       eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
     #       docker tag scala-maven:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/scala-maven:${CIRCLE_BRANCH}
     #       docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:${CIRCLE_BRANCH}

# show all docker images
#      - run:
#          name:
#          command: |
#            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
#            aws ecr list-images --repository-name scala-maven

  deploy:
  
    working_directory: ~/repo

    docker:
    - image: circleci/openjdk:8-jdk

    environment:
      # Customize the JVM maximum heap size
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

  #    - attach_workspace:
  #        at: workspace

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # use latest cache if no exact match found
            - v1-dependencies- 
            
      - run:
          name: show Hi
          command: echo "Hi"
  


workflows:
  version: 2.1
  test-build-n-deploy:
    jobs:
    - test
    - build:
        requires:
          - test
        filters:
          branches:
            only:                         
            - develop
    - deploy:
        requires:
          - build
        filters:
          branches:
            only:
            - develop
            
  run-with-tag:
    jobs:
    - test:
        filters:
          tags:
            only: /^v.*/
          branches:
              ignore: /.*/            
    - build:
        requires:
          - test
        filters:
          tags:
            only: /^v.*/
          branches:
              ignore: /.*/              
    - deploy:
        requires:
          - build
        filters:
          tags:
            only: /^v.*/ 
          branches:
              ignore: /.*/ 
